Index: withme_backend/src/main/java/com/javalab/student/service/QuestionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javalab.student.service;\r\n\r\nimport com.javalab.student.dto.ChoiceDTO;\r\nimport com.javalab.student.dto.QuestionDTO;\r\nimport com.javalab.student.entity.Question;\r\nimport com.javalab.student.entity.SurveyTopic;\r\nimport com.javalab.student.entity.UserSelectedTopics;\r\nimport com.javalab.student.repository.QuestionRepository;\r\nimport com.javalab.student.repository.UserSelectedTopicsRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * \uD83D\uDCCC 질문 서비스 (무료 & 유료 문진)\r\n * - 설문 질문을 가져오는 서비스 로직\r\n */\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class QuestionService {\r\n\r\n    private final QuestionRepository questionRepository;\r\n    private final UserSelectedTopicsRepository userSelectedTopicsRepository;\r\n\r\n    /**\r\n     * ✅ 모든 질문 조회\r\n     */\r\n    @Transactional(readOnly = true)\r\n    public List<Question> getAllQuestions() {\r\n        return questionRepository.findAll();\r\n    }\r\n\r\n    /**\r\n     * ✅ 특정 질문 ID로 질문 조회\r\n     */\r\n    @Transactional(readOnly = true)\r\n    public Optional<Question> getQuestionById(Long questionId) {\r\n        return questionRepository.findById(questionId);\r\n    }\r\n\r\n    /**\r\n     * ✅ 무료 문진 (surveyId 기준 질문 & 선택지 조회)\r\n     */\r\n    @Transactional(readOnly = true)\r\n    public List<QuestionDTO> getFreeSurveyQuestions(Long surveyId) {\r\n        List<Question> questions = questionRepository.findBySurvey_SurveyId(surveyId);\r\n        return questions.stream().map(QuestionDTO::fromEntity).collect(Collectors.toList());\r\n    }\r\n\r\n    /**\r\n     * ✅ 유료 문진 (유저가 선택한 주제 기반 질문 & 선택지 조회)\r\n     */\r\n    @Transactional(readOnly = true)\r\n    public List<QuestionDTO> getPaidSurveyQuestions(Long userId) {\r\n        List<UserSelectedTopics> selectedTopics = userSelectedTopicsRepository.findAllByMemberUserId(userId);\r\n        List<SurveyTopic> topics = selectedTopics.stream()\r\n                .map(UserSelectedTopics::getSurveyTopic)\r\n                .collect(Collectors.toList());\r\n\r\n        List<Question> questions = questionRepository.findBySurveyTopicIn(topics);\r\n        return questions.stream().map(QuestionDTO::fromEntity).collect(Collectors.toList());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/withme_backend/src/main/java/com/javalab/student/service/QuestionService.java b/withme_backend/src/main/java/com/javalab/student/service/QuestionService.java
--- a/withme_backend/src/main/java/com/javalab/student/service/QuestionService.java	(revision 4c23bbfa1bdc093609d3bed8ac16badc47cca692)
+++ b/withme_backend/src/main/java/com/javalab/student/service/QuestionService.java	(date 1739462775697)
@@ -1,9 +1,7 @@
 package com.javalab.student.service;
 
-import com.javalab.student.dto.ChoiceDTO;
 import com.javalab.student.dto.QuestionDTO;
 import com.javalab.student.entity.Question;
-import com.javalab.student.entity.SurveyTopic;
 import com.javalab.student.entity.UserSelectedTopics;
 import com.javalab.student.repository.QuestionRepository;
 import com.javalab.student.repository.UserSelectedTopicsRepository;
@@ -16,52 +14,62 @@
 import java.util.stream.Collectors;
 
 /**
- * 📌 질문 서비스 (무료 & 유료 문진)
- * - 설문 질문을 가져오는 서비스 로직
+ * 📌 질문 서비스
+ * 설문에 포함된 각 질문에 대한 비즈니스 로직을 처리하는 서비스 클래스
  */
 @Service
-@RequiredArgsConstructor
+@RequiredArgsConstructor  // ✅ 생성자 주입 자동 생성
 public class QuestionService {
 
     private final QuestionRepository questionRepository;
-    private final UserSelectedTopicsRepository userSelectedTopicsRepository;
+    private final UserSelectedTopicsRepository userSelectedTopicsRepository; // ✅ 유료 문진을 위한 Repository 추가
 
     /**
-     * ✅ 모든 질문 조회
+     * ✅ 모든 질문 조회 (선택지 포함)
      */
     @Transactional(readOnly = true)
-    public List<Question> getAllQuestions() {
-        return questionRepository.findAll();
+    public List<QuestionDTO> getAllQuestions() {
+        return questionRepository.findAll().stream()
+                .map(QuestionDTO::fromEntity)
+                .collect(Collectors.toList());
     }
 
     /**
-     * ✅ 특정 질문 ID로 질문 조회
+     * ✅ 질문 ID로 질문 조회 (선택지 포함)
      */
     @Transactional(readOnly = true)
-    public Optional<Question> getQuestionById(Long questionId) {
-        return questionRepository.findById(questionId);
+    public Optional<QuestionDTO> getQuestionById(Long questionId) {
+        return questionRepository.findById(questionId)
+                .map(QuestionDTO::fromEntity);
     }
 
     /**
-     * ✅ 무료 문진 (surveyId 기준 질문 & 선택지 조회)
+     * ✅ 특정 설문 ID에 해당하는 질문 조회 (무료 문진)
+     * 질문과 선택지를 함께 반환하도록 수정
      */
     @Transactional(readOnly = true)
     public List<QuestionDTO> getFreeSurveyQuestions(Long surveyId) {
-        List<Question> questions = questionRepository.findBySurvey_SurveyId(surveyId);
-        return questions.stream().map(QuestionDTO::fromEntity).collect(Collectors.toList());
+        return questionRepository.findBySurvey_SurveyIdAndSurvey_Type(surveyId, "FREE").stream()
+                .map(QuestionDTO::fromEntity)
+                .collect(Collectors.toList());
     }
 
     /**
-     * ✅ 유료 문진 (유저가 선택한 주제 기반 질문 & 선택지 조회)
+     * ✅ 특정 userId에 해당하는 유료 문진 질문 리스트 반환 (선택지 포함)
      */
     @Transactional(readOnly = true)
-    public List<QuestionDTO> getPaidSurveyQuestions(Long userId) {
-        List<UserSelectedTopics> selectedTopics = userSelectedTopicsRepository.findAllByMemberUserId(userId);
-        List<SurveyTopic> topics = selectedTopics.stream()
-                .map(UserSelectedTopics::getSurveyTopic)
+    public List<QuestionDTO> getPaidQuestionsByUserId(Long userId) {
+        // ✅ 유저가 선택한 주제 목록 조회
+        List<UserSelectedTopics> selectedTopics = userSelectedTopicsRepository.findAllByMember_Id(userId);
+
+        // ✅ 선택한 주제의 ID 목록 추출
+        List<Long> topicIds = selectedTopics.stream()
+                .map(topic -> topic.getSurveyTopic().getTopicId())
                 .collect(Collectors.toList());
 
-        List<Question> questions = questionRepository.findBySurveyTopicIn(topics);
-        return questions.stream().map(QuestionDTO::fromEntity).collect(Collectors.toList());
+        // ✅ 선택한 주제에 해당하는 질문 목록 조회
+        return questionRepository.findBySurveyTopic_TopicIdIn(topicIds).stream()
+                .map(QuestionDTO::fromEntity)
+                .collect(Collectors.toList());
     }
-}
+}
\ No newline at end of file
Index: withme_backend/src/main/java/com/javalab/student/repository/QuestionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javalab.student.repository;\r\n\r\nimport com.javalab.student.entity.Question;\r\nimport com.javalab.student.entity.SurveyTopic;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * 질문 Repository\r\n * Question 엔티티에 대한 CRUD 작업을 처리하는 리포지토리\r\n */\r\n@Repository\r\npublic interface QuestionRepository extends JpaRepository<Question, Long> {\r\n\r\n    /**\r\n     * ✅ 특정 설문 ID에 속한 질문 조회 (무료 문진)\r\n     */\r\n    List<Question> findBySurvey_SurveyId(Long surveyId);\r\n\r\n    /**\r\n     * ✅ 특정 유저가 선택한 주제에 속한 질문 조회 (유료 문진)\r\n     */\r\n    List<Question> findBySurveyTopicIn(List<SurveyTopic> topics);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/withme_backend/src/main/java/com/javalab/student/repository/QuestionRepository.java b/withme_backend/src/main/java/com/javalab/student/repository/QuestionRepository.java
--- a/withme_backend/src/main/java/com/javalab/student/repository/QuestionRepository.java	(revision 4c23bbfa1bdc093609d3bed8ac16badc47cca692)
+++ b/withme_backend/src/main/java/com/javalab/student/repository/QuestionRepository.java	(date 1739462804508)
@@ -1,8 +1,9 @@
 package com.javalab.student.repository;
 
 import com.javalab.student.entity.Question;
-import com.javalab.student.entity.SurveyTopic;
+import org.springframework.data.jpa.repository.EntityGraph;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
 import java.util.List;
@@ -15,12 +16,18 @@
 public interface QuestionRepository extends JpaRepository<Question, Long> {
 
     /**
-     * ✅ 특정 설문 ID에 속한 질문 조회 (무료 문진)
+     * ✅ 특정 설문 ID와 설문 타입으로 질문 조회 (무료 문진)
+     * 선택지(choices)도 함께 가져오도록 LEFT JOIN FETCH 적용
      */
-    List<Question> findBySurvey_SurveyId(Long surveyId);
+    @Query("SELECT DISTINCT q FROM Question q LEFT JOIN FETCH q.choices WHERE q.survey.surveyId = :surveyId AND q.survey.type = :surveyType")
+    List<Question> findBySurvey_SurveyIdAndSurvey_Type(Long surveyId, String surveyType);
 
     /**
-     * ✅ 특정 유저가 선택한 주제에 속한 질문 조회 (유료 문진)
+     * ✅ 특정 주제(SurveyTopic)에 해당하는 질문 조회 (유료 회원 문진)
+     * 선택지(choices)도 함께 가져오도록 LEFT JOIN FETCH 적용
      */
-    List<Question> findBySurveyTopicIn(List<SurveyTopic> topics);
+    @Query("SELECT DISTINCT q FROM Question q LEFT JOIN FETCH q.choices WHERE q.surveyTopic.topicId IN :topicIds")
+    List<Question> findBySurveyTopic_TopicIdIn(List<Long> topicIds);
+
+
 }
\ No newline at end of file
